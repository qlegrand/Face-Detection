{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"FaceRec beta","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"Znt7TIZxaXvU","colab_type":"code","outputId":"da83a809-c971-4dea-a65b-d320b559e492","executionInfo":{"status":"ok","timestamp":1555964553611,"user_tz":-180,"elapsed":4225,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}},"colab":{"base_uri":"https://localhost:8080/","height":153}},"cell_type":"code","source":["!pip install mxnet"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: mxnet in /usr/local/lib/python3.6/dist-packages (1.4.0.post0)\n","Requirement already satisfied: requests>=2.20.0 in /usr/local/lib/python3.6/dist-packages (from mxnet) (2.21.0)\n","Requirement already satisfied: numpy<1.15.0,>=1.8.2 in /usr/local/lib/python3.6/dist-packages (from mxnet) (1.14.6)\n","Requirement already satisfied: graphviz<0.9.0,>=0.8.1 in /usr/local/lib/python3.6/dist-packages (from mxnet) (0.8.4)\n","Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.20.0->mxnet) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.20.0->mxnet) (2019.3.9)\n","Requirement already satisfied: urllib3<1.25,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests>=2.20.0->mxnet) (1.22)\n","Requirement already satisfied: idna<2.9,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.20.0->mxnet) (2.6)\n"],"name":"stdout"}]},{"metadata":{"id":"sn5DsliVWN7X","colab_type":"code","outputId":"2f9044dd-83b8-445c-af5c-b1c332d0b3f2","executionInfo":{"status":"ok","timestamp":1555964565437,"user_tz":-180,"elapsed":16027,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}},"colab":{"base_uri":"https://localhost:8080/","height":391}},"cell_type":"code","source":["!git clone https://gist.github.com/dc7e60aa487430ea704a8cb3f2c5d6a6.git /tmp/colab_util_repo\n","!mv /tmp/colab_util_repo/colab_util.py colab_util.py \n","!rm -r /tmp/colab_util_repo\n","!pip install pydrive"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Cloning into '/tmp/colab_util_repo'...\n","remote: Enumerating objects: 40, done.\u001b[K\n","remote: Total 40 (delta 0), reused 0 (delta 0), pack-reused 40\u001b[K\n","Unpacking objects: 100% (40/40), done.\n","Collecting pydrive\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/52/e0/0e64788e5dd58ce2d6934549676243dc69d982f198524be9b99e9c2a4fd5/PyDrive-1.3.1.tar.gz (987kB)\n","\u001b[K    100% |████████████████████████████████| 993kB 25.1MB/s \n","\u001b[?25hRequirement already satisfied: google-api-python-client>=1.2 in /usr/local/lib/python3.6/dist-packages (from pydrive) (1.6.7)\n","Requirement already satisfied: oauth2client>=4.0.0 in /usr/local/lib/python3.6/dist-packages (from pydrive) (4.1.3)\n","Requirement already satisfied: PyYAML>=3.0 in /usr/local/lib/python3.6/dist-packages (from pydrive) (3.13)\n","Requirement already satisfied: httplib2<1dev,>=0.9.2 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client>=1.2->pydrive) (0.11.3)\n","Requirement already satisfied: six<2dev,>=1.6.1 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client>=1.2->pydrive) (1.11.0)\n","Requirement already satisfied: uritemplate<4dev,>=3.0.0 in /usr/local/lib/python3.6/dist-packages (from google-api-python-client>=1.2->pydrive) (3.0.0)\n","Requirement already satisfied: rsa>=3.1.4 in /usr/local/lib/python3.6/dist-packages (from oauth2client>=4.0.0->pydrive) (4.0)\n","Requirement already satisfied: pyasn1>=0.1.7 in /usr/local/lib/python3.6/dist-packages (from oauth2client>=4.0.0->pydrive) (0.4.5)\n","Requirement already satisfied: pyasn1-modules>=0.0.5 in /usr/local/lib/python3.6/dist-packages (from oauth2client>=4.0.0->pydrive) (0.2.4)\n","Building wheels for collected packages: pydrive\n","  Building wheel for pydrive (setup.py) ... \u001b[?25ldone\n","\u001b[?25h  Stored in directory: /root/.cache/pip/wheels/fa/d2/9a/d3b6b506c2da98289e5d417215ce34b696db856643bad779f4\n","Successfully built pydrive\n","Installing collected packages: pydrive\n","Successfully installed pydrive-1.3.1\n"],"name":"stdout"}]},{"metadata":{"id":"cE3bIwhN_lea","colab_type":"code","outputId":"0ee9d566-d6d4-4904-8883-eabcd21ef533","executionInfo":{"status":"ok","timestamp":1555964590004,"user_tz":-180,"elapsed":40570,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"metadata":{"id":"2-444SVU1H0-","colab_type":"code","outputId":"a2b263f9-9eeb-4248-e765-f24114ac5c07","executionInfo":{"status":"ok","timestamp":1555964592089,"user_tz":-180,"elapsed":42627,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"cell_type":"code","source":["%cd /content/gdrive/My\\ Drive/Colab\\ Notebooks/Face\\ Detection\\ \\(personal\\ project\\)\n","!pwd"],"execution_count":4,"outputs":[{"output_type":"stream","text":["/content/gdrive/My Drive/Colab Notebooks/Face Detection (personal project)\n","/content/gdrive/My Drive/Colab Notebooks/Face Detection (personal project)\n"],"name":"stdout"}]},{"metadata":{"id":"pqU8Fu4pbwvK","colab_type":"code","colab":{}},"cell_type":"code","source":["import sys\n","sys.path.append('/content/gdrive/My Drive/Colab Notebooks/Face Detection (personal project)/ipynb/')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"cTuYSFegb1qi","colab_type":"code","outputId":"7b8bd021-1141-452e-fd16-74bfb452431c","executionInfo":{"status":"ok","timestamp":1555964595842,"user_tz":-180,"elapsed":46345,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","import keras\n","import os\n","import time\n","import mxnet as mx\n","import warnings\n","\n","from keras import layers, activations, models, optimizers, utils, regularizers, initializers\n","from keras.engine.input_layer import Input\n","from keras.callbacks import Callback\n","from keras.preprocessing import image\n","import keras.backend as K\n","from sklearn.metrics import f1_score\n","\n","from datetime import datetime as dt\n","from mxnet import recordio\n","\n","%matplotlib inline\n","import matplotlib\n","import matplotlib.pyplot as plt\n","\n","if sys.version_info >= (3, 0, 0):\n","    import urllib.request as urllib # ugly but works\n","else:\n","    import urllib\n","    \n","import stl10_input\n","import FaceNetUtils as FNU\n","from colab_util import *"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"},{"output_type":"stream","text":["sys.version_info(major=3, minor=6, micro=7, releaselevel='final', serial=0)\n"],"name":"stdout"}]},{"metadata":{"id":"Clhg58oh4KTH","colab_type":"code","outputId":"7defb27b-e95a-4a8d-c8a4-b7b51396209e","executionInfo":{"status":"ok","timestamp":1555964598141,"user_tz":-180,"elapsed":48629,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["device_name = tf.test.gpu_device_name()\n","if device_name != '/device:GPU:0':\n","  raise SystemError('GPU device not found')\n","print('Found GPU at: {}'.format(device_name))"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Found GPU at: /device:GPU:0\n"],"name":"stdout"}]},{"metadata":{"id":"WrtO9eRPb_Z2","colab_type":"code","colab":{}},"cell_type":"code","source":["train_parameters = {\n","    'name'    :'FaceRec_siam',\n","    'seed'    :42,\n","    'base_lr' :1e-9,\n","    'max_lr'  : 1e-4,\n","    'lambda'  :0.0,\n","    'momentum':0.9,\n","    'batch_size':128,\n","    'epochs'  :2,\n","    'schedule':'triangle',\n","    'period'  :10,\n","    'scaling' :0.9\n","    \n","}\n","\n","run = dt.utcnow().strftime(\"%Y%m%d%H%M\")\n","\n","MODEL_LOAD_PATH = './models/ResNet_run{}.h5'.format('201902270807')\n","MODEL_SAVE_PATH = './models/FRNet_run{}.h5'.format(run)\n","LOGS_FILE = \"FRNet_run{}.csv\".format(run)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"XuNI3_FicJLc","colab_type":"code","colab":{}},"cell_type":"code","source":["DATA_DIR = './data/'\n","MODELS_DIR = './models/'\n","LOGS_DIR = './logs/'\n","DATA_PATH = './data/MS1M/'\n","\n","gd_imgidx = './data/faces_emore/train.idx'\n","gd_imgrec = './data/faces_emore/train.rec'\n","path_imgidx = '/content/data/train.idx'\n","path_imgrec = '/content/data/train.rec'"],"execution_count":0,"outputs":[]},{"metadata":{"id":"GGgia-jDKl7g","colab_type":"code","outputId":"4e71cf38-1e39-4c39-a91b-64f8af166805","executionInfo":{"status":"ok","timestamp":1555964598148,"user_tz":-180,"elapsed":48603,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"cell_type":"code","source":["\"\"\"MSM_refined_112x112 = 'https://redcrossstorage.blob.core.windows.net/datasets/faces_ms1m-refine-v2_112x112.zip'\n","VGG2_112x112 = 'https://redcrossstorage.blob.core.windows.net/datasets/faces_vgg2_112x112.zip'\n","Emore = 'https://redcrossstorage.blob.core.windows.net/datasets/faces_emore.zip'\n","FNU.download_and_extract(MSM_refined_112x112,DATA_DIR,task='e', force=True)\"\"\""],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"MSM_refined_112x112 = 'https://redcrossstorage.blob.core.windows.net/datasets/faces_ms1m-refine-v2_112x112.zip'\\nVGG2_112x112 = 'https://redcrossstorage.blob.core.windows.net/datasets/faces_vgg2_112x112.zip'\\nEmore = 'https://redcrossstorage.blob.core.windows.net/datasets/faces_emore.zip'\\nFNU.download_and_extract(MSM_refined_112x112,DATA_DIR,task='e', force=True)\""]},"metadata":{"tags":[]},"execution_count":10}]},{"metadata":{"id":"t62m-ywBvAcO","colab_type":"code","colab":{}},"cell_type":"code","source":["class SiamSequenceGenerator(utils.Sequence):\n","    def __init__(self,images_files_structure, batch_size, path_idx, path_rec, skew=0.05):\n","        self.images_files_structure = images_files_structure\n","        self.dir_list = np.array(list(images_files_structure.keys()))\n","        self.batch_size = batch_size\n","        self.skew = skew\n","        self.path_idx = path_idx\n","        self.path_rec = path_rec\n","        self.imgrec = recordio.MXIndexedRecordIO(path_idx, path_rec, 'r')\n","        chosen_persons = []\n","        chosen_pictures = []\n","        for key,val in images_files_structure.items():\n","            if len(val) != 0:\n","                for v in val:    \n","                    chosen_persons.append(key)\n","                    chosen_pictures.append(v)\n","            else:\n","                print('Person {} has no picture'.format(key))\n","                             \n","        self.persons_list = np.array(chosen_persons)\n","        self.pictures_list = np.array(chosen_pictures)\n","        self.num_img = len(chosen_pictures)\n","        self.length = int(np.ceil(self.num_img/float(self.batch_size)))\n","        self.on_epoch_begin()\n","        \n","    def __len__(self):\n","        return self.length\n","    \n","    def on_epoch_begin(self):\n","        skew_count = 0\n","        init_permutations = np.random.permutation(len(self.persons_list))\n","        chosen_persons_1 = self.persons_list[init_permutations]\n","        self.chosen_pictures_1 = self.pictures_list[init_permutations]\n","        self.chosen_pictures_2 = []\n","        self.labels = []\n","        \n","        for person in chosen_persons_1:       \n","            if skew_count < np.ceil(self.skew * len(self.pictures_list)):\n","                chosen_person_2 = person\n","                label = 1\n","                skew_count += 1\n","            else:\n","                label = 0\n","                while True:\n","                    chosen_person_2 = chosen_persons_1[np.random.choice(len(chosen_persons_1))]\n","                    if len(self.images_files_structure[chosen_person_2]) != 0:\n","                        break\n","                \n","            self.chosen_pictures_2.append(self.images_files_structure[chosen_person_2][np.random.choice(len(self.images_files_structure[chosen_person_2]))])\n","            self.labels.append(label)\n","            \n","        permutations = np.random.permutation(len(self.persons_list))\n","        self.chosen_pictures_1 = self.chosen_pictures_1[permutations]\n","        self.chosen_pictures_2 = np.array(self.chosen_pictures_2)[permutations]\n","        self.labels = np.array(self.labels)[permutations]\n","     \n","    def __getitem__(self,idx):\n","        batch_idx_1 = self.chosen_pictures_1[idx * self.batch_size:(idx + 1) * self.batch_size] \n","        batch_idx_2 = self.chosen_pictures_2[idx * self.batch_size:(idx + 1) * self.batch_size] \n","        batch_y = self.labels[idx * self.batch_size:(idx + 1) * self.batch_size]\n","        img_1 = np.reshape([mx.image.imdecode(recordio.unpack(self.imgrec.read_idx(idx_1))[1]).asnumpy() for idx_1 in batch_idx_1],(-1,112,112,3))\n","        img_2 = np.reshape([mx.image.imdecode(recordio.unpack(self.imgrec.read_idx(idx_2))[1]).asnumpy() for idx_2 in batch_idx_2],(-1,112,112,3))\n","        \n","        return [img_1/255 ,img_2/255] , batch_y.astype(float)\n","      \n","class SaveModelandReduceLR(Callback):\n","    def __init__(self,measure,val_generator,path,period,reduce_lr=True,factor=10,patience=5,min_lr=1e-8):\n","        self.measure = measure\n","        self.period = period\n","        self.path = path\n","        self.generator = val_generator\n","        self.reduce_lr = reduce_lr\n","        self.patience = patience\n","        self.min_lr = min_lr\n","        self.factor = factor\n","                   \n","    def on_train_begin(self, logs={}):\n","        self.best_measure = 0.0\n","        self.increment = 1\n","        eval_measure_stack = [] \n","        self.improvement_counter = 1\n","        for i in range(self.generator.length):\n","            batch_x, targ = self.generator.__getitem__(i)\n","            predict = (np.asarray(self.model.predict(batch_x)))\n","            eval_measure_stack.append(self.measure(np.squeeze(targ), np.squeeze(predict.round())))\n","        eval_measure = np.mean(eval_measure_stack)\n","        print('\\nval {}: {}'.format(self.measure.__name__, eval_measure))\n","        if eval_measure >= self.best_measure:\n","            self.best_measure = eval_measure\n","        \n","    def on_batch_end(self, batch, logs={}):\n","        eval_measure_stack = [] \n","        if self.increment % self.period == 0:\n","            for i in range(self.generator.length):\n","                batch_x, targ = self.generator.__getitem__(i)\n","                predict = (np.asarray(self.model.predict(batch_x)))\n","                eval_measure_stack.append(self.measure(np.squeeze(targ), np.squeeze(predict.round())))\n","            eval_measure = np.mean(eval_measure_stack)\n","            print('\\nval {}: {}'.format(self.measure.__name__, eval_measure))\n","            \n","            if eval_measure > self.best_measure:\n","                self.improvement_counter = 1\n","                self.best_measure = eval_measure\n","                self.model.save(self.path)\n","                print('Model saved')\n","            elif self.reduce_lr:\n","                if self.improvement_counter >= self.patience:\n","                    self.improvement_counter = 1\n","                    reduced_lr = max(K.get_value(self.model.optimizer.lr)/self.factor,self.min_lr)\n","                    if K.get_value(self.model.optimizer.lr) >= self.min_lr:\n","                        print(\"LR reduced on plateau to {}\".format(reduced_lr))\n","                    K.set_value(self.model.optimizer.lr, reduced_lr)\n","                    \n","                else:\n","                    self.improvement_counter += 1\n","                    \n","        self.increment += 1\n","        \n","    def on_epoch_end(self, epoch, logs={}):\n","        eval_measure_stack = [] \n","        self.increment = 1\n","        for i in range(self.generator.length):\n","            batch_x, targ = self.generator.__getitem__(i)\n","            predict = (np.asarray(self.model.predict(batch_x)))\n","            eval_measure_stack.append(self.measure(np.squeeze(targ), np.squeeze(predict.round())))\n","        eval_measure = np.mean(eval_measure_stack)\n","        print('\\nval {}: {}'.format(self.measure.__name__, eval_measure))\n","        if eval_measure >= self.best_measure:\n","            self.best_measure = eval_measure\n","            self.model.save(self.path)\n","            print('Model saved')\n","            \n","class LRSearch(Callback):\n","    def __init__(self, measure, val_generator,min_lr=1.0e-8, max_lr=3.0, method=\"exp\", train_iterations = 10000, val_points = 100, data_skew = 0.05):\n","        self.min_lr = min_lr\n","        self.max_lr = max_lr\n","        self.method = method\n","        self.skew = data_skew\n","        self.total_steps = train_iterations\n","        self.validation_steps = val_points\n","        self.generator = val_generator\n","        self.measure = measure\n","        warnings.filterwarnings(\"ignore\")\n","        \n","    def on_train_begin(self, logs={}):\n","        if self.method == \"exp\":\n","            self.base = np.power((self.max_lr/self.min_lr),1/(self.total_steps -1))\n","        else:\n","            self.base = (self.max_lr - self.min_lr)/(self.total_steps -1)\n","        self.lr_sched = self.min_lr\n","        self.losses = []\n","        self.accuracies = []\n","        self.plot_x = []\n","        self.plot_x_val = []\n","        self.val_measure = []\n","        self.iteration_count = 0\n","        self.val_checkpoints = round(self.total_steps/self.validation_steps)\n","        return\n","    \n","    def on_batch_begin(self, batch, logs={}):\n","        K.set_value(self.model.optimizer.lr, self.lr_sched)\n","        return\n","        \n","    def on_batch_end(self, batch, logs={}):\n","        self.losses.append(logs['loss'])\n","        self.accuracies.append((logs['acc']-1+self.skew)/self.skew)\n","        self.plot_x.append(self.lr_sched)\n","        \n","        if self.iteration_count % self.val_checkpoints == 0:\n","            eval_measure_stack = [] \n","            for i in range(self.generator.length):\n","                batch_x, targ = self.generator.__getitem__(i)\n","                predict = (np.asarray(self.model.predict(batch_x)))\n","                eval_measure_stack.append(self.measure(np.squeeze(targ), np.squeeze(predict.round())))\n","            self.val_measure.append(np.mean(eval_measure_stack))\n","            self.plot_x_val.append(self.lr_sched)\n","        \n","        self.iteration_count +=1\n","        if self.iteration_count >= self.total_steps:\n","            self.model.stop_training = True\n","        \n","        if self.method==\"exp\":\n","            self.lr_sched *= self.base\n","        else:\n","            self.lr_sched += self.base\n","        return\n","      \n","    def on_train_end(self, epoch, logs={}):\n","        alpha = 0.95\n","        plt.figure(figsize = (10, 6))\n","        plt.plot(self.plot_x)\n","        plt.xlabel(\"steps\")\n","        plt.ylabel(\"LR\")\n","        plt.show()\n","      \n","        plot_y_measure = self.__ewma_vectorized(self.val_measure, alpha)\n","        plt.figure(figsize = (10, 6))\n","        plt.xlabel(\"LR\")\n","        plt.ylabel(\"Validation {}\".format(self.measure.__name__))\n","        plt.plot(self.plot_x_val, plot_y_measure)\n","        plt.savefig('./figures/val_{}.png'.format(self.measure.__name__))\n","        plt.show()\n","        \n","        plt.figure(figsize = (10, 6))\n","        plt.xscale(\"log\")\n","        plt.xlabel(\"LOG LR\")\n","        plt.ylabel(\"Validation {}\".format(self.measure.__name__))\n","        plt.plot(self.plot_x_val, plot_y_measure)\n","        plt.savefig('./figures/log_val_{}.png'.format(self.measure.__name__))\n","        plt.show()\n","        \n","        plot_y_loss = self.__ewma_vectorized(self.losses, alpha)\n","        plt.figure(figsize = (10, 6))\n","        plt.xlabel(\"LR\")\n","        plt.ylabel(\"Train Loss\")\n","        plt.plot(self.plot_x, plot_y_loss)\n","        plt.savefig('./figures/train_losses.png')\n","        plt.show()\n","        \n","        plt.figure(figsize = (10, 6))\n","        plt.xscale(\"log\")\n","        plt.xlabel(\"LOG LR\")\n","        plt.ylabel(\"Train Loss\")\n","        plt.plot(self.plot_x, plot_y_loss)\n","        plt.savefig('./figures/log_train_losses.png')\n","        plt.show()\n","        \n","        plot_y_acc = self.__ewma_vectorized(self.accuracies, alpha)\n","        plt.figure(figsize = (10, 6))\n","        plt.xlabel(\"LR\")\n","        plt.ylabel(\"Train Accuracies\")\n","        plt.plot(self.plot_x, plot_y_acc)\n","        plt.savefig('./figures/train_accuracies.png')\n","        plt.show()\n","        \n","        plt.figure(figsize = (10, 6))\n","        plt.xscale(\"log\")\n","        plt.xlabel(\"LOG LR\")\n","        plt.ylabel(\"Train Accuracies\")\n","        plt.plot(self.plot_x, plot_y_acc)\n","        plt.savefig('./figures/log_train_accuracies.png')\n","        plt.show()\n","    \n","    def __ewma_vectorized(self, data, alpha):\n","        alpha_ = 1-alpha\n","        D = pd.DataFrame(data)\n","        M = D.ewm(alpha=alpha_).mean()\n","        out = M.values\n","        return out\n","      \n","class LRScheduler(Callback):\n","    def __init__(self, max_lr, scale_factor=1.0, period=1000, schedule=\"triangle\", plot_schedule=True): \n","        self.scale_factor = scale_factor\n","        self.max_lr = max_lr\n","        self.steps_in_period =  period\n","        self.schedule = schedule\n","        self.plot_schedule = plot_schedule\n","        \n","    def on_train_begin(self, logs={}):\n","        if self.params['steps'] != None:\n","            self.steps_in_epoch = self.params['steps']\n","        else:\n","            self.steps_in_epoch = np.ceil(self.params['samples'] / self.params['batch_size'])\n","        self.step = 0\n","        self.nb_steps = 0\n","        self.amplitude_lr = 0\n","        self.slope_lr = 0\n","        self.min_lr = K.get_value(self.model.optimizer.lr)\n","        self.saved_lr = K.get_value(self.model.optimizer.lr)\n","        self.second_period = 0\n","        \n","        if self.schedule == \"triangle\":\n","            self.amplitude_lr = (self.max_lr - self.min_lr)\n","        else:\n","            self.frequency = np.pi/self.steps_in_period\n","            self.amplitude_lr = (self.max_lr - self.min_lr)/2\n","            \n","        self.lr_stack = []\n","        return\n","    \n","    def on_batch_begin(self, batch, logs={}):\n","        if self.schedule == \"triangle\":\n","            x = abs(- self.amplitude_lr + 2 * self.amplitude_lr/self.steps_in_period * self.step)\n","            learning_rate = self.min_lr + max(0, self.amplitude_lr - x)\n","        else:\n","            learning_rate = self.amplitude_lr * np.cos(self.step * self.frequency) + self.amplitude_lr + self.min_lr\n","        K.set_value(self.model.optimizer.lr, learning_rate)\n","        self.lr_stack.append(learning_rate)\n","        self.nb_steps+=1\n","        self.step+=1\n","        return\n","    \n","    def on_batch_end(self, batch, logs={}):\n","        batch_ = batch + 1\n","        if batch_ % self.steps_in_period == 0:     \n","            self.step = 0\n","            self.amplitude_lr *= self.scale_factor\n","            if self.second_period < 3: \n","                self.plot_lr_schedule()\n","                self.second_period += 1\n","        return\n","    \n","    def on_train_end(self, epoch, logs={}):    \n","        K.set_value(self.model.optimizer.lr, self.saved_lr)\n","        if self.plot_schedule: self.plot_lr_schedule()\n","        return\n","\n","    def plot_lr_schedule(self):\n","        plt.figure(figsize = (5, 3))\n","        plt.plot(np.arange(self.nb_steps), self.lr_stack)\n","        plt.xlabel(\"#steps\")\n","        plt.ylabel(\"lr schedule\")\n","        plt.show()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"El-KQFmNtCJN","colab_type":"code","colab":{}},"cell_type":"code","source":["kilobytes = 1024\n","megabytes = kilobytes * 1024\n","gigabytes = megabytes * 1024\n","chunksize = int(1.1 * gigabytes)                   # default: roughly a floppy\n","readsize = kilobytes\n","\n","def split(fromfile, todir, chunksize=chunksize): \n","    if not os.path.exists(todir):                  # caller handles errors\n","        os.mkdir(todir)                            # make dir, read/write parts\n","    else:\n","        for fname in os.listdir(todir):            # delete any existing files\n","            os.remove(os.path.join(todir, fname))           \n","    partnum = 0\n","    input = open(fromfile, 'rb')                   # use binary mode on Windows\n","    while 1:                                       # eof=empty string from read\n","        chunk = input.read(chunksize)              # get next part <= chunksize\n","        if not chunk: break\n","        partnum  = partnum+1\n","        filename = os.path.join(todir, ('part%04d' % partnum))\n","        fileobj  = open(filename, 'wb')\n","        fileobj.write(chunk)\n","        fileobj.close()                            # or simply open(  ).write(  )\n","    input.close()\n","    assert partnum <= 9999                         # join sort fails if 5 digits\n","    return partnum\n","  \n","def join(fromdir, tofile,readsize=megabytes):\n","    output = open(tofile, 'wb')\n","    parts  = os.listdir(fromdir)\n","    parts.sort()\n","    for filename in parts:\n","        filepath = os.path.join(fromdir, filename)\n","        fileobj  = open(filepath, 'rb')\n","        while 1:\n","            filebytes = fileobj.read(readsize)\n","            if not filebytes: break\n","            output.write(filebytes)\n","        fileobj.close()\n","    output.close()\n","    \n","def PrepareDataset(joinfunc): \n","    idxfile = 'train.idx'\n","    recfile = 'train.rec'\n","    fromIDXdir = '/Colab Notebooks/Face Detection (personal project)/data/faces_emore/'\n","    fromRECpartsdir = '/Colab Notebooks/Face Detection (personal project)/data/MS1MSplit/'\n","    fromRECpartsreldir = './data/MS1MSplit/'\n","    toRECpartsdir = '/content/MS1MParts/'\n","    todatadir = '/content/data/'\n","    \n","    drive_handler = GoogleDriveHandler()\n","  \n","    if not os.path.exists(toRECpartsdir):\n","        os.mkdir(toRECpartsdir)\n","        parts  = os.listdir(fromRECpartsreldir)\n","        for filename in parts: \n","            drive_handler.download(os.path.join(toRECpartsdir,filename), target_path=os.path.join(fromRECpartsdir,filename))\n","            print('{} moved'.format(filename))\n","       \n","    if not os.path.exists(todatadir):\n","        os.mkdir(todatadir)\n","        drive_handler.download(os.path.join(todatadir,idxfile), target_path=os.path.join(fromIDXdir,idxfile))\n","        print('{} moved'.format(idxfile))\n","        print('\\nAll files moved')\n","        joinfunc(toRECpartsdir,os.path.join(todatadir,recfile))\n","        print('\\nDataset Ready!')\n","        \n","def LoadModel(model,path):\n","    files  = os.listdir(path)\n","    most_recent = 0\n","    for file in files:\n","        date = int(file[-15:-3])\n","        if date > most_recent:\n","            most_recent = date\n","            mr_file = file\n","    print('Most recent checkpoint {}/{}/{} {}:{} ({})'.format(str(most_recent)[6:8],str(most_recent)[4:6],str(most_recent)[:4],str(most_recent)[8:10],str(most_recent)[10:],mr_file))\n","    model_to_load = os.path.join(path,mr_file)\n","    model.load_weights(model_to_load, by_name=True)\n","    print('Model {} loaded!'.format(mr_file))\n","    \n","def ExtractRECStructure(rec_file,dataset_structure=DATA_DIR):\n","    structure_log = os.path.join(dataset_structure,'dataset_structure.csv')\n","\n","    if not os.path.exists(structure_log):\n","        structure = {} \n","        max_ = 5908395\n","        imrec = recordio.MXRecordIO(rec_file, 'r')\n","        for i in range(max_):\n","            sys.stdout.write('\\rReading structure {:.4f}%'.format(float(i)/float(max_) * 100.0))\n","            sys.stdout.flush()\n","            header, _ =  recordio.unpack(imrec.read())\n","            try:\n","                structure[int(header.label)].append(header.id)\n","            except KeyError:\n","                structure[int(header.label)] = [header.id]\n","            if i % 500000 == 0 : \n","                df = pd.DataFrame.from_dict(structure, orient='index')\n","                df.to_csv(structure_log)\n","                print('\\nStructure saved')\n","        df = pd.DataFrame.from_dict(structure, orient='index')\n","        df.to_csv(structure_log)\n","        print('\\nStructure saved')\n","    else:\n","        df = pd.read_csv(structure_log, index_col=0)\n","        tmp_dict = df.to_dict('index')\n","        structure = {u: np.array([int(x) for w,x in v.items() if pd.notna(x)]) for u,v in tmp_dict.items()}\n","        \n","    print('\\nStructure extracted')\n","    return structure\n","  \n","def SplitRECStructure(structure,val_length=100):\n","    num_persons = len(list(structure.keys()))\n","    \n","    split = num_persons - min(val_length, int(num_persons*0.1))\n","\n","    train_structure = {key:val for key,val in structure.items() if key <= split}\n","    val_structure = {key:val for key,val in structure.items() if key > split} \n","    \n","    return train_structure, val_structure"],"execution_count":0,"outputs":[]},{"metadata":{"id":"KJ1gF2k444p6","colab_type":"code","outputId":"2bf9ff3d-5093-40bd-8434-db63876e3fcd","executionInfo":{"status":"ok","timestamp":1555964599304,"user_tz":-180,"elapsed":49715,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["\"\"\"to_folder = './data/MS1MSplit'\n","split(gd_imgrec,to_folder)\"\"\""],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"to_folder = './data/MS1MSplit'\\nsplit(gd_imgrec,to_folder)\""]},"metadata":{"tags":[]},"execution_count":13}]},{"metadata":{"id":"2jyaipGxVEOl","colab_type":"code","outputId":"9b06ba00-6c36-4107-90f5-df44b257bf1a","executionInfo":{"status":"ok","timestamp":1555965062693,"user_tz":-180,"elapsed":513093,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}},"colab":{"base_uri":"https://localhost:8080/","height":357}},"cell_type":"code","source":["PrepareDataset(join)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["part0001 moved\n","part0002 moved\n","part0003 moved\n","part0004 moved\n","part0005 moved\n","part0006 moved\n","part0007 moved\n","part0008 moved\n","part0009 moved\n","part0010 moved\n","part0011 moved\n","part0012 moved\n","part0013 moved\n","part0014 moved\n","part0015 moved\n","train.idx moved\n","\n","All files moved\n","\n","Dataset Ready!\n"],"name":"stdout"}]},{"metadata":{"id":"wFZ0C0h14g2U","colab_type":"code","outputId":"7e5e8967-d915-4f89-82ec-2f97560dce8c","executionInfo":{"status":"ok","timestamp":1555965115112,"user_tz":-180,"elapsed":565500,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"cell_type":"code","source":["structure = ExtractRECStructure(gd_imgrec)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["\n","Structure extracted\n"],"name":"stdout"}]},{"metadata":{"id":"PQ128tkdvJtp","colab_type":"code","colab":{}},"cell_type":"code","source":["train_structure, val_structure = SplitRECStructure(structure)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"VxGG7A56naxT","colab_type":"code","outputId":"616757e7-2481-4e2c-c37c-5fcecd8c583c","executionInfo":{"status":"ok","timestamp":1555965122593,"user_tz":-180,"elapsed":572957,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}},"colab":{"base_uri":"https://localhost:8080/","height":6565}},"cell_type":"code","source":["channels = [\n","    [64, 64, 256],\n","    [128, 128, 512],\n","    [256, 256, 1024],\n","    [512, 512, 2048]\n","]\n","\n","trainable = False\n","\n","input_ = Input(shape=(112,112,3))\n","x = layers.Conv2D(64,(7,7),kernel_initializer=initializers.he_normal(seed=train_parameters['seed']),strides=2, padding='same',kernel_regularizer=regularizers.l2(train_parameters['lambda']), trainable=trainable,name=\"block_0_cv_0\")(input_)\n","x = layers.BatchNormalization(trainable=trainable, name=\"block_0_bn_0\")(x)\n","x = layers.Activation('relu', name=\"block_0_relu_0\")(x)\n","x = layers.MaxPooling2D(pool_size=(2, 2), strides=2, name=\"block_0_mp_0\")(x)\n","\n","x = FNU.conv_block(x, channels[0], train_parameters['lambda'], 1, strides=1, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.id_conv_block(x, channels[0], train_parameters['lambda'], 2, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.id_conv_block(x, channels[0], train_parameters['lambda'], 3, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.conv_block(x, channels[1], train_parameters['lambda'], 4, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.id_conv_block(x, channels[1], train_parameters['lambda'], 5, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.id_conv_block(x, channels[1], train_parameters['lambda'], 6, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.id_conv_block(x, channels[1], train_parameters['lambda'], 7, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.conv_block(x, channels[2], train_parameters['lambda'], 8, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.id_conv_block(x, channels[2], train_parameters['lambda'], 9, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.id_conv_block(x, channels[2], train_parameters['lambda'], 10, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.id_conv_block(x, channels[2], train_parameters['lambda'], 11, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.id_conv_block(x, channels[2], train_parameters['lambda'], 12, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.id_conv_block(x, channels[2], train_parameters['lambda'], 13, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.conv_block(x, channels[3], train_parameters['lambda'], 14, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.id_conv_block(x, channels[3], train_parameters['lambda'], 15, trainable=trainable, seed=train_parameters['seed'])\n","x = FNU.id_conv_block(x, channels[3], train_parameters['lambda'], 16, trainable=trainable, seed=train_parameters['seed'])\n","x = layers.AveragePooling2D(pool_size=(3, 3), strides=1)(x)#different from model to adapt to STL-10 // pool_size=(7, 7)\n","x = layers.Flatten()(x)\n","\n","x = layers.Dense(128, activation = 'linear', name = \"features_dense_0\")(x)\n","x = layers.BatchNormalization(name = 'features_bn_0')(x)\n","output_ = layers.Activation('relu', name = 'features_relu_0')(x)\n","\n","features_model = models.Model(inputs=input_, outputs=output_)\n","\n","LoadModel(features_model,MODELS_DIR)\n","\n","features_model.summary()"],"execution_count":17,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Colocations handled automatically by placer.\n","Most recent checkpoint 19/04/2019 21:31 (FRNet_run201904192131.h5)\n","Model FRNet_run201904192131.h5 loaded!\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_1 (InputLayer)            (None, 112, 112, 3)  0                                            \n","__________________________________________________________________________________________________\n","block_0_cv_0 (Conv2D)           (None, 56, 56, 64)   9472        input_1[0][0]                    \n","__________________________________________________________________________________________________\n","block_0_bn_0 (BatchNormalizatio (None, 56, 56, 64)   256         block_0_cv_0[0][0]               \n","__________________________________________________________________________________________________\n","block_0_relu_0 (Activation)     (None, 56, 56, 64)   0           block_0_bn_0[0][0]               \n","__________________________________________________________________________________________________\n","block_0_mp_0 (MaxPooling2D)     (None, 28, 28, 64)   0           block_0_relu_0[0][0]             \n","__________________________________________________________________________________________________\n","block_1_cv_0 (Conv2D)           (None, 28, 28, 64)   4160        block_0_mp_0[0][0]               \n","__________________________________________________________________________________________________\n","block_1_bn_0 (BatchNormalizatio (None, 28, 28, 64)   256         block_1_cv_0[0][0]               \n","__________________________________________________________________________________________________\n","block_1_relu_0 (Activation)     (None, 28, 28, 64)   0           block_1_bn_0[0][0]               \n","__________________________________________________________________________________________________\n","block_1_cv_1 (Conv2D)           (None, 28, 28, 64)   36928       block_1_relu_0[0][0]             \n","__________________________________________________________________________________________________\n","block_1_bn_1 (BatchNormalizatio (None, 28, 28, 64)   256         block_1_cv_1[0][0]               \n","__________________________________________________________________________________________________\n","block_1_relu_1 (Activation)     (None, 28, 28, 64)   0           block_1_bn_1[0][0]               \n","__________________________________________________________________________________________________\n","block_1_cv_2 (Conv2D)           (None, 28, 28, 256)  16640       block_1_relu_1[0][0]             \n","__________________________________________________________________________________________________\n","block_1_cv_skip (Conv2D)        (None, 28, 28, 256)  16640       block_0_mp_0[0][0]               \n","__________________________________________________________________________________________________\n","block_1_bn_2 (BatchNormalizatio (None, 28, 28, 256)  1024        block_1_cv_2[0][0]               \n","__________________________________________________________________________________________________\n","block_1_bn_skip (BatchNormaliza (None, 28, 28, 256)  1024        block_1_cv_skip[0][0]            \n","__________________________________________________________________________________________________\n","add_1 (Add)                     (None, 28, 28, 256)  0           block_1_bn_2[0][0]               \n","                                                                 block_1_bn_skip[0][0]            \n","__________________________________________________________________________________________________\n","block_1_relu_2 (Activation)     (None, 28, 28, 256)  0           add_1[0][0]                      \n","__________________________________________________________________________________________________\n","block_2_cv_0 (Conv2D)           (None, 28, 28, 64)   16448       block_1_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_2_bn_0 (BatchNormalizatio (None, 28, 28, 64)   256         block_2_cv_0[0][0]               \n","__________________________________________________________________________________________________\n","block_2_relu_0 (Activation)     (None, 28, 28, 64)   0           block_2_bn_0[0][0]               \n","__________________________________________________________________________________________________\n","block_2_cv_1 (Conv2D)           (None, 28, 28, 64)   36928       block_2_relu_0[0][0]             \n","__________________________________________________________________________________________________\n","block_2_bn_1 (BatchNormalizatio (None, 28, 28, 64)   256         block_2_cv_1[0][0]               \n","__________________________________________________________________________________________________\n","block_2_relu_1 (Activation)     (None, 28, 28, 64)   0           block_2_bn_1[0][0]               \n","__________________________________________________________________________________________________\n","block_2_cv_2 (Conv2D)           (None, 28, 28, 256)  16640       block_2_relu_1[0][0]             \n","__________________________________________________________________________________________________\n","block_2_bn_2 (BatchNormalizatio (None, 28, 28, 256)  1024        block_2_cv_2[0][0]               \n","__________________________________________________________________________________________________\n","add_2 (Add)                     (None, 28, 28, 256)  0           block_2_bn_2[0][0]               \n","                                                                 block_1_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_2_relu_2 (Activation)     (None, 28, 28, 256)  0           add_2[0][0]                      \n","__________________________________________________________________________________________________\n","block_3_cv_0 (Conv2D)           (None, 28, 28, 64)   16448       block_2_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_3_bn_0 (BatchNormalizatio (None, 28, 28, 64)   256         block_3_cv_0[0][0]               \n","__________________________________________________________________________________________________\n","block_3_relu_0 (Activation)     (None, 28, 28, 64)   0           block_3_bn_0[0][0]               \n","__________________________________________________________________________________________________\n","block_3_cv_1 (Conv2D)           (None, 28, 28, 64)   36928       block_3_relu_0[0][0]             \n","__________________________________________________________________________________________________\n","block_3_bn_1 (BatchNormalizatio (None, 28, 28, 64)   256         block_3_cv_1[0][0]               \n","__________________________________________________________________________________________________\n","block_3_relu_1 (Activation)     (None, 28, 28, 64)   0           block_3_bn_1[0][0]               \n","__________________________________________________________________________________________________\n","block_3_cv_2 (Conv2D)           (None, 28, 28, 256)  16640       block_3_relu_1[0][0]             \n","__________________________________________________________________________________________________\n","block_3_bn_2 (BatchNormalizatio (None, 28, 28, 256)  1024        block_3_cv_2[0][0]               \n","__________________________________________________________________________________________________\n","add_3 (Add)                     (None, 28, 28, 256)  0           block_3_bn_2[0][0]               \n","                                                                 block_2_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_3_relu_2 (Activation)     (None, 28, 28, 256)  0           add_3[0][0]                      \n","__________________________________________________________________________________________________\n","block_4_cv_0 (Conv2D)           (None, 14, 14, 128)  32896       block_3_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_4_bn_0 (BatchNormalizatio (None, 14, 14, 128)  512         block_4_cv_0[0][0]               \n","__________________________________________________________________________________________________\n","block_4_relu_0 (Activation)     (None, 14, 14, 128)  0           block_4_bn_0[0][0]               \n","__________________________________________________________________________________________________\n","block_4_cv_1 (Conv2D)           (None, 14, 14, 128)  147584      block_4_relu_0[0][0]             \n","__________________________________________________________________________________________________\n","block_4_bn_1 (BatchNormalizatio (None, 14, 14, 128)  512         block_4_cv_1[0][0]               \n","__________________________________________________________________________________________________\n","block_4_relu_1 (Activation)     (None, 14, 14, 128)  0           block_4_bn_1[0][0]               \n","__________________________________________________________________________________________________\n","block_4_cv_2 (Conv2D)           (None, 14, 14, 512)  66048       block_4_relu_1[0][0]             \n","__________________________________________________________________________________________________\n","block_4_cv_skip (Conv2D)        (None, 14, 14, 512)  131584      block_3_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_4_bn_2 (BatchNormalizatio (None, 14, 14, 512)  2048        block_4_cv_2[0][0]               \n","__________________________________________________________________________________________________\n","block_4_bn_skip (BatchNormaliza (None, 14, 14, 512)  2048        block_4_cv_skip[0][0]            \n","__________________________________________________________________________________________________\n","add_4 (Add)                     (None, 14, 14, 512)  0           block_4_bn_2[0][0]               \n","                                                                 block_4_bn_skip[0][0]            \n","__________________________________________________________________________________________________\n","block_4_relu_2 (Activation)     (None, 14, 14, 512)  0           add_4[0][0]                      \n","__________________________________________________________________________________________________\n","block_5_cv_0 (Conv2D)           (None, 14, 14, 128)  65664       block_4_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_5_bn_0 (BatchNormalizatio (None, 14, 14, 128)  512         block_5_cv_0[0][0]               \n","__________________________________________________________________________________________________\n","block_5_relu_0 (Activation)     (None, 14, 14, 128)  0           block_5_bn_0[0][0]               \n","__________________________________________________________________________________________________\n","block_5_cv_1 (Conv2D)           (None, 14, 14, 128)  147584      block_5_relu_0[0][0]             \n","__________________________________________________________________________________________________\n","block_5_bn_1 (BatchNormalizatio (None, 14, 14, 128)  512         block_5_cv_1[0][0]               \n","__________________________________________________________________________________________________\n","block_5_relu_1 (Activation)     (None, 14, 14, 128)  0           block_5_bn_1[0][0]               \n","__________________________________________________________________________________________________\n","block_5_cv_2 (Conv2D)           (None, 14, 14, 512)  66048       block_5_relu_1[0][0]             \n","__________________________________________________________________________________________________\n","block_5_bn_2 (BatchNormalizatio (None, 14, 14, 512)  2048        block_5_cv_2[0][0]               \n","__________________________________________________________________________________________________\n","add_5 (Add)                     (None, 14, 14, 512)  0           block_5_bn_2[0][0]               \n","                                                                 block_4_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_5_relu_2 (Activation)     (None, 14, 14, 512)  0           add_5[0][0]                      \n","__________________________________________________________________________________________________\n","block_6_cv_0 (Conv2D)           (None, 14, 14, 128)  65664       block_5_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_6_bn_0 (BatchNormalizatio (None, 14, 14, 128)  512         block_6_cv_0[0][0]               \n","__________________________________________________________________________________________________\n","block_6_relu_0 (Activation)     (None, 14, 14, 128)  0           block_6_bn_0[0][0]               \n","__________________________________________________________________________________________________\n","block_6_cv_1 (Conv2D)           (None, 14, 14, 128)  147584      block_6_relu_0[0][0]             \n","__________________________________________________________________________________________________\n","block_6_bn_1 (BatchNormalizatio (None, 14, 14, 128)  512         block_6_cv_1[0][0]               \n","__________________________________________________________________________________________________\n","block_6_relu_1 (Activation)     (None, 14, 14, 128)  0           block_6_bn_1[0][0]               \n","__________________________________________________________________________________________________\n","block_6_cv_2 (Conv2D)           (None, 14, 14, 512)  66048       block_6_relu_1[0][0]             \n","__________________________________________________________________________________________________\n","block_6_bn_2 (BatchNormalizatio (None, 14, 14, 512)  2048        block_6_cv_2[0][0]               \n","__________________________________________________________________________________________________\n","add_6 (Add)                     (None, 14, 14, 512)  0           block_6_bn_2[0][0]               \n","                                                                 block_5_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_6_relu_2 (Activation)     (None, 14, 14, 512)  0           add_6[0][0]                      \n","__________________________________________________________________________________________________\n","block_7_cv_0 (Conv2D)           (None, 14, 14, 128)  65664       block_6_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_7_bn_0 (BatchNormalizatio (None, 14, 14, 128)  512         block_7_cv_0[0][0]               \n","__________________________________________________________________________________________________\n","block_7_relu_0 (Activation)     (None, 14, 14, 128)  0           block_7_bn_0[0][0]               \n","__________________________________________________________________________________________________\n","block_7_cv_1 (Conv2D)           (None, 14, 14, 128)  147584      block_7_relu_0[0][0]             \n","__________________________________________________________________________________________________\n","block_7_bn_1 (BatchNormalizatio (None, 14, 14, 128)  512         block_7_cv_1[0][0]               \n","__________________________________________________________________________________________________\n","block_7_relu_1 (Activation)     (None, 14, 14, 128)  0           block_7_bn_1[0][0]               \n","__________________________________________________________________________________________________\n","block_7_cv_2 (Conv2D)           (None, 14, 14, 512)  66048       block_7_relu_1[0][0]             \n","__________________________________________________________________________________________________\n","block_7_bn_2 (BatchNormalizatio (None, 14, 14, 512)  2048        block_7_cv_2[0][0]               \n","__________________________________________________________________________________________________\n","add_7 (Add)                     (None, 14, 14, 512)  0           block_7_bn_2[0][0]               \n","                                                                 block_6_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_7_relu_2 (Activation)     (None, 14, 14, 512)  0           add_7[0][0]                      \n","__________________________________________________________________________________________________\n","block_8_cv_0 (Conv2D)           (None, 7, 7, 256)    131328      block_7_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_8_bn_0 (BatchNormalizatio (None, 7, 7, 256)    1024        block_8_cv_0[0][0]               \n","__________________________________________________________________________________________________\n","block_8_relu_0 (Activation)     (None, 7, 7, 256)    0           block_8_bn_0[0][0]               \n","__________________________________________________________________________________________________\n","block_8_cv_1 (Conv2D)           (None, 7, 7, 256)    590080      block_8_relu_0[0][0]             \n","__________________________________________________________________________________________________\n","block_8_bn_1 (BatchNormalizatio (None, 7, 7, 256)    1024        block_8_cv_1[0][0]               \n","__________________________________________________________________________________________________\n","block_8_relu_1 (Activation)     (None, 7, 7, 256)    0           block_8_bn_1[0][0]               \n","__________________________________________________________________________________________________\n","block_8_cv_2 (Conv2D)           (None, 7, 7, 1024)   263168      block_8_relu_1[0][0]             \n","__________________________________________________________________________________________________\n","block_8_cv_skip (Conv2D)        (None, 7, 7, 1024)   525312      block_7_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_8_bn_2 (BatchNormalizatio (None, 7, 7, 1024)   4096        block_8_cv_2[0][0]               \n","__________________________________________________________________________________________________\n","block_8_bn_skip (BatchNormaliza (None, 7, 7, 1024)   4096        block_8_cv_skip[0][0]            \n","__________________________________________________________________________________________________\n","add_8 (Add)                     (None, 7, 7, 1024)   0           block_8_bn_2[0][0]               \n","                                                                 block_8_bn_skip[0][0]            \n","__________________________________________________________________________________________________\n","block_8_relu_2 (Activation)     (None, 7, 7, 1024)   0           add_8[0][0]                      \n","__________________________________________________________________________________________________\n","block_9_cv_0 (Conv2D)           (None, 7, 7, 256)    262400      block_8_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_9_bn_0 (BatchNormalizatio (None, 7, 7, 256)    1024        block_9_cv_0[0][0]               \n","__________________________________________________________________________________________________\n","block_9_relu_0 (Activation)     (None, 7, 7, 256)    0           block_9_bn_0[0][0]               \n","__________________________________________________________________________________________________\n","block_9_cv_1 (Conv2D)           (None, 7, 7, 256)    590080      block_9_relu_0[0][0]             \n","__________________________________________________________________________________________________\n","block_9_bn_1 (BatchNormalizatio (None, 7, 7, 256)    1024        block_9_cv_1[0][0]               \n","__________________________________________________________________________________________________\n","block_9_relu_1 (Activation)     (None, 7, 7, 256)    0           block_9_bn_1[0][0]               \n","__________________________________________________________________________________________________\n","block_9_cv_2 (Conv2D)           (None, 7, 7, 1024)   263168      block_9_relu_1[0][0]             \n","__________________________________________________________________________________________________\n","block_9_bn_2 (BatchNormalizatio (None, 7, 7, 1024)   4096        block_9_cv_2[0][0]               \n","__________________________________________________________________________________________________\n","add_9 (Add)                     (None, 7, 7, 1024)   0           block_9_bn_2[0][0]               \n","                                                                 block_8_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_9_relu_2 (Activation)     (None, 7, 7, 1024)   0           add_9[0][0]                      \n","__________________________________________________________________________________________________\n","block_10_cv_0 (Conv2D)          (None, 7, 7, 256)    262400      block_9_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_10_bn_0 (BatchNormalizati (None, 7, 7, 256)    1024        block_10_cv_0[0][0]              \n","__________________________________________________________________________________________________\n","block_10_relu_0 (Activation)    (None, 7, 7, 256)    0           block_10_bn_0[0][0]              \n","__________________________________________________________________________________________________\n","block_10_cv_1 (Conv2D)          (None, 7, 7, 256)    590080      block_10_relu_0[0][0]            \n","__________________________________________________________________________________________________\n","block_10_bn_1 (BatchNormalizati (None, 7, 7, 256)    1024        block_10_cv_1[0][0]              \n","__________________________________________________________________________________________________\n","block_10_relu_1 (Activation)    (None, 7, 7, 256)    0           block_10_bn_1[0][0]              \n","__________________________________________________________________________________________________\n","block_10_cv_2 (Conv2D)          (None, 7, 7, 1024)   263168      block_10_relu_1[0][0]            \n","__________________________________________________________________________________________________\n","block_10_bn_2 (BatchNormalizati (None, 7, 7, 1024)   4096        block_10_cv_2[0][0]              \n","__________________________________________________________________________________________________\n","add_10 (Add)                    (None, 7, 7, 1024)   0           block_10_bn_2[0][0]              \n","                                                                 block_9_relu_2[0][0]             \n","__________________________________________________________________________________________________\n","block_10_relu_2 (Activation)    (None, 7, 7, 1024)   0           add_10[0][0]                     \n","__________________________________________________________________________________________________\n","block_11_cv_0 (Conv2D)          (None, 7, 7, 256)    262400      block_10_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","block_11_bn_0 (BatchNormalizati (None, 7, 7, 256)    1024        block_11_cv_0[0][0]              \n","__________________________________________________________________________________________________\n","block_11_relu_0 (Activation)    (None, 7, 7, 256)    0           block_11_bn_0[0][0]              \n","__________________________________________________________________________________________________\n","block_11_cv_1 (Conv2D)          (None, 7, 7, 256)    590080      block_11_relu_0[0][0]            \n","__________________________________________________________________________________________________\n","block_11_bn_1 (BatchNormalizati (None, 7, 7, 256)    1024        block_11_cv_1[0][0]              \n","__________________________________________________________________________________________________\n","block_11_relu_1 (Activation)    (None, 7, 7, 256)    0           block_11_bn_1[0][0]              \n","__________________________________________________________________________________________________\n","block_11_cv_2 (Conv2D)          (None, 7, 7, 1024)   263168      block_11_relu_1[0][0]            \n","__________________________________________________________________________________________________\n","block_11_bn_2 (BatchNormalizati (None, 7, 7, 1024)   4096        block_11_cv_2[0][0]              \n","__________________________________________________________________________________________________\n","add_11 (Add)                    (None, 7, 7, 1024)   0           block_11_bn_2[0][0]              \n","                                                                 block_10_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","block_11_relu_2 (Activation)    (None, 7, 7, 1024)   0           add_11[0][0]                     \n","__________________________________________________________________________________________________\n","block_12_cv_0 (Conv2D)          (None, 7, 7, 256)    262400      block_11_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","block_12_bn_0 (BatchNormalizati (None, 7, 7, 256)    1024        block_12_cv_0[0][0]              \n","__________________________________________________________________________________________________\n","block_12_relu_0 (Activation)    (None, 7, 7, 256)    0           block_12_bn_0[0][0]              \n","__________________________________________________________________________________________________\n","block_12_cv_1 (Conv2D)          (None, 7, 7, 256)    590080      block_12_relu_0[0][0]            \n","__________________________________________________________________________________________________\n","block_12_bn_1 (BatchNormalizati (None, 7, 7, 256)    1024        block_12_cv_1[0][0]              \n","__________________________________________________________________________________________________\n","block_12_relu_1 (Activation)    (None, 7, 7, 256)    0           block_12_bn_1[0][0]              \n","__________________________________________________________________________________________________\n","block_12_cv_2 (Conv2D)          (None, 7, 7, 1024)   263168      block_12_relu_1[0][0]            \n","__________________________________________________________________________________________________\n","block_12_bn_2 (BatchNormalizati (None, 7, 7, 1024)   4096        block_12_cv_2[0][0]              \n","__________________________________________________________________________________________________\n","add_12 (Add)                    (None, 7, 7, 1024)   0           block_12_bn_2[0][0]              \n","                                                                 block_11_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","block_12_relu_2 (Activation)    (None, 7, 7, 1024)   0           add_12[0][0]                     \n","__________________________________________________________________________________________________\n","block_13_cv_0 (Conv2D)          (None, 7, 7, 256)    262400      block_12_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","block_13_bn_0 (BatchNormalizati (None, 7, 7, 256)    1024        block_13_cv_0[0][0]              \n","__________________________________________________________________________________________________\n","block_13_relu_0 (Activation)    (None, 7, 7, 256)    0           block_13_bn_0[0][0]              \n","__________________________________________________________________________________________________\n","block_13_cv_1 (Conv2D)          (None, 7, 7, 256)    590080      block_13_relu_0[0][0]            \n","__________________________________________________________________________________________________\n","block_13_bn_1 (BatchNormalizati (None, 7, 7, 256)    1024        block_13_cv_1[0][0]              \n","__________________________________________________________________________________________________\n","block_13_relu_1 (Activation)    (None, 7, 7, 256)    0           block_13_bn_1[0][0]              \n","__________________________________________________________________________________________________\n","block_13_cv_2 (Conv2D)          (None, 7, 7, 1024)   263168      block_13_relu_1[0][0]            \n","__________________________________________________________________________________________________\n","block_13_bn_2 (BatchNormalizati (None, 7, 7, 1024)   4096        block_13_cv_2[0][0]              \n","__________________________________________________________________________________________________\n","add_13 (Add)                    (None, 7, 7, 1024)   0           block_13_bn_2[0][0]              \n","                                                                 block_12_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","block_13_relu_2 (Activation)    (None, 7, 7, 1024)   0           add_13[0][0]                     \n","__________________________________________________________________________________________________\n","block_14_cv_0 (Conv2D)          (None, 4, 4, 512)    524800      block_13_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","block_14_bn_0 (BatchNormalizati (None, 4, 4, 512)    2048        block_14_cv_0[0][0]              \n","__________________________________________________________________________________________________\n","block_14_relu_0 (Activation)    (None, 4, 4, 512)    0           block_14_bn_0[0][0]              \n","__________________________________________________________________________________________________\n","block_14_cv_1 (Conv2D)          (None, 4, 4, 512)    2359808     block_14_relu_0[0][0]            \n","__________________________________________________________________________________________________\n","block_14_bn_1 (BatchNormalizati (None, 4, 4, 512)    2048        block_14_cv_1[0][0]              \n","__________________________________________________________________________________________________\n","block_14_relu_1 (Activation)    (None, 4, 4, 512)    0           block_14_bn_1[0][0]              \n","__________________________________________________________________________________________________\n","block_14_cv_2 (Conv2D)          (None, 4, 4, 2048)   1050624     block_14_relu_1[0][0]            \n","__________________________________________________________________________________________________\n","block_14_cv_skip (Conv2D)       (None, 4, 4, 2048)   2099200     block_13_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","block_14_bn_2 (BatchNormalizati (None, 4, 4, 2048)   8192        block_14_cv_2[0][0]              \n","__________________________________________________________________________________________________\n","block_14_bn_skip (BatchNormaliz (None, 4, 4, 2048)   8192        block_14_cv_skip[0][0]           \n","__________________________________________________________________________________________________\n","add_14 (Add)                    (None, 4, 4, 2048)   0           block_14_bn_2[0][0]              \n","                                                                 block_14_bn_skip[0][0]           \n","__________________________________________________________________________________________________\n","block_14_relu_2 (Activation)    (None, 4, 4, 2048)   0           add_14[0][0]                     \n","__________________________________________________________________________________________________\n","block_15_cv_0 (Conv2D)          (None, 4, 4, 512)    1049088     block_14_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","block_15_bn_0 (BatchNormalizati (None, 4, 4, 512)    2048        block_15_cv_0[0][0]              \n","__________________________________________________________________________________________________\n","block_15_relu_0 (Activation)    (None, 4, 4, 512)    0           block_15_bn_0[0][0]              \n","__________________________________________________________________________________________________\n","block_15_cv_1 (Conv2D)          (None, 4, 4, 512)    2359808     block_15_relu_0[0][0]            \n","__________________________________________________________________________________________________\n","block_15_bn_1 (BatchNormalizati (None, 4, 4, 512)    2048        block_15_cv_1[0][0]              \n","__________________________________________________________________________________________________\n","block_15_relu_1 (Activation)    (None, 4, 4, 512)    0           block_15_bn_1[0][0]              \n","__________________________________________________________________________________________________\n","block_15_cv_2 (Conv2D)          (None, 4, 4, 2048)   1050624     block_15_relu_1[0][0]            \n","__________________________________________________________________________________________________\n","block_15_bn_2 (BatchNormalizati (None, 4, 4, 2048)   8192        block_15_cv_2[0][0]              \n","__________________________________________________________________________________________________\n","add_15 (Add)                    (None, 4, 4, 2048)   0           block_15_bn_2[0][0]              \n","                                                                 block_14_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","block_15_relu_2 (Activation)    (None, 4, 4, 2048)   0           add_15[0][0]                     \n","__________________________________________________________________________________________________\n","block_16_cv_0 (Conv2D)          (None, 4, 4, 512)    1049088     block_15_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","block_16_bn_0 (BatchNormalizati (None, 4, 4, 512)    2048        block_16_cv_0[0][0]              \n","__________________________________________________________________________________________________\n","block_16_relu_0 (Activation)    (None, 4, 4, 512)    0           block_16_bn_0[0][0]              \n","__________________________________________________________________________________________________\n","block_16_cv_1 (Conv2D)          (None, 4, 4, 512)    2359808     block_16_relu_0[0][0]            \n","__________________________________________________________________________________________________\n","block_16_bn_1 (BatchNormalizati (None, 4, 4, 512)    2048        block_16_cv_1[0][0]              \n","__________________________________________________________________________________________________\n","block_16_relu_1 (Activation)    (None, 4, 4, 512)    0           block_16_bn_1[0][0]              \n","__________________________________________________________________________________________________\n","block_16_cv_2 (Conv2D)          (None, 4, 4, 2048)   1050624     block_16_relu_1[0][0]            \n","__________________________________________________________________________________________________\n","block_16_bn_2 (BatchNormalizati (None, 4, 4, 2048)   8192        block_16_cv_2[0][0]              \n","__________________________________________________________________________________________________\n","add_16 (Add)                    (None, 4, 4, 2048)   0           block_16_bn_2[0][0]              \n","                                                                 block_15_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","block_16_relu_2 (Activation)    (None, 4, 4, 2048)   0           add_16[0][0]                     \n","__________________________________________________________________________________________________\n","average_pooling2d_1 (AveragePoo (None, 2, 2, 2048)   0           block_16_relu_2[0][0]            \n","__________________________________________________________________________________________________\n","flatten_1 (Flatten)             (None, 8192)         0           average_pooling2d_1[0][0]        \n","__________________________________________________________________________________________________\n","features_dense_0 (Dense)        (None, 128)          1048704     flatten_1[0][0]                  \n","__________________________________________________________________________________________________\n","features_bn_0 (BatchNormalizati (None, 128)          512         features_dense_0[0][0]           \n","__________________________________________________________________________________________________\n","features_relu_0 (Activation)    (None, 128)          0           features_bn_0[0][0]              \n","==================================================================================================\n","Total params: 24,636,928\n","Trainable params: 1,048,960\n","Non-trainable params: 23,587,968\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"metadata":{"id":"3TtTYtI5257G","colab_type":"code","outputId":"49e6fd65-bc25-43d3-82ec-478737865dc0","executionInfo":{"status":"error","timestamp":1555965397472,"user_tz":-180,"elapsed":12990,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}},"colab":{"base_uri":"https://localhost:8080/","height":1221}},"cell_type":"code","source":["input_a = Input(shape=(112,112,3), name='input_a')\n","input_b = Input(shape=(112,112,3), name='input_b')\n","\n","features_a = features_model(input_a)\n","features_b = features_model(input_b)\n","\n","combined_features = layers.concatenate([features_a, features_b], name = 'combined_features_concatenate_0')\n","combined_features = layers.Dense(128, activation = 'linear', name = 'extended_combined_features_dense_0')(combined_features)\n","combined_features = layers.BatchNormalization(name = 'extended_combined_features_bn_0')(combined_features)\n","combined_features = layers.Activation('relu', name = 'extended_combined_features_relu_0')(combined_features)\n","combined_features = layers.Dense(64, activation = 'linear',name = 'extended_combined_features_dense_1')(combined_features)\n","combined_features = layers.BatchNormalization(name = 'extended_combined_features_bn_1')(combined_features)\n","combined_features = layers.Activation('relu', name = 'extended_combined_features_relu_1')(combined_features)\n","model_output = layers.Dense(1, activation = 'sigmoid', name = 'extended_fn_output_0')(combined_features)\n","\n","similarity_model = models.Model(inputs = [input_a, input_b], outputs = model_output, name = 'Similarity_Model')\n","\n","LoadModel(similarity_model,MODELS_DIR)\n","\n","optimizer = optimizers.SGD(lr=train_parameters['base_lr'], momentum=train_parameters['momentum'],nesterov=True)\n","#optimizer = optimizers.Adam(lr=train_parameters['base_lr'])\n","\n","similarity_model.compile(loss='binary_crossentropy',optimizer=optimizer, metrics=['accuracy'])\n","similarity_model.summary()"],"execution_count":23,"outputs":[{"output_type":"stream","text":["Most recent checkpoint 19/04/2019 21:31 (FRNet_run201904192131.h5)\n"],"name":"stdout"},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-d8665bd9a233>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0msimilarity_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0minput_a\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_b\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel_output\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Similarity_Model'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mLoadModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msimilarity_model\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mMODELS_DIR\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0moptimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moptimizers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSGD\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_parameters\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'base_lr'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmomentum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_parameters\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'momentum'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnesterov\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-12-97d1b1d9b1e7>\u001b[0m in \u001b[0;36mLoadModel\u001b[0;34m(model, path)\u001b[0m\n\u001b[1;32m     75\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Most recent checkpoint {}/{}/{} {}:{} ({})'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmost_recent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmost_recent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmost_recent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmost_recent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmost_recent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmr_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m     \u001b[0mmodel_to_load\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmr_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_weights\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_to_load\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mby_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Model {} loaded!'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmr_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/network.py\u001b[0m in \u001b[0;36mload_weights\u001b[0;34m(self, filepath, by_name, skip_mismatch, reshape)\u001b[0m\n\u001b[1;32m   1161\u001b[0m                 saving.load_weights_from_hdf5_group_by_name(\n\u001b[1;32m   1162\u001b[0m                     \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mskip_mismatch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mskip_mismatch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1163\u001b[0;31m                     reshape=reshape)\n\u001b[0m\u001b[1;32m   1164\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1165\u001b[0m                 saving.load_weights_from_hdf5_group(\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py\u001b[0m in \u001b[0;36mload_weights_from_hdf5_group_by_name\u001b[0;34m(f, layers, skip_mismatch, reshape)\u001b[0m\n\u001b[1;32m   1113\u001b[0m                 \u001b[0moriginal_keras_version\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1114\u001b[0m                 \u001b[0moriginal_backend\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1115\u001b[0;31m                 reshape=reshape)\n\u001b[0m\u001b[1;32m   1116\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweight_values\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msymbolic_weights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1117\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mskip_mismatch\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py\u001b[0m in \u001b[0;36mpreprocess_weights_for_loading\u001b[0;34m(layer, weights, original_keras_version, original_backend, reshape)\u001b[0m\n\u001b[1;32m    680\u001b[0m         \u001b[0mweights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconvert_nested_time_distributed\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    681\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'Model'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Sequential'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 682\u001b[0;31m         \u001b[0mweights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconvert_nested_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    683\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    684\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0moriginal_keras_version\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'1'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py\u001b[0m in \u001b[0;36mconvert_nested_model\u001b[0;34m(weights)\u001b[0m\n\u001b[1;32m    668\u001b[0m                     \u001b[0mweights\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mnum_weights\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    669\u001b[0m                     \u001b[0moriginal_keras_version\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moriginal_keras_version\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 670\u001b[0;31m                     original_backend=original_backend))\n\u001b[0m\u001b[1;32m    671\u001b[0m                 \u001b[0mweights\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mweights\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnum_weights\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    672\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnew_weights\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/saving.py\u001b[0m in \u001b[0;36mpreprocess_weights_for_loading\u001b[0;34m(layer, weights, original_keras_version, original_backend, reshape)\u001b[0m\n\u001b[1;32m    799\u001b[0m             \u001b[0mweights\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlayer_weights_shape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    800\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mlayer_weights_shape\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mweights\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 801\u001b[0;31m             \u001b[0mweights\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranspose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    802\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'ConvLSTM2D'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    803\u001b[0m                 \u001b[0mweights\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtranspose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweights\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36mtranspose\u001b[0;34m(a, axes)\u001b[0m\n\u001b[1;32m    573\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m     \"\"\"\n\u001b[0;32m--> 575\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_wrapfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'transpose'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    576\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    577\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36m_wrapfunc\u001b[0;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_wrapfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     \u001b[0;31m# An AttributeError occurs if the object does not have\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: axes don't match array"]}]},{"metadata":{"id":"IQpz8xe9wbnn","colab_type":"code","colab":{}},"cell_type":"code","source":["train_generator = SiamSequenceGenerator(train_structure,train_parameters['batch_size'],path_imgidx,path_imgrec)\n","val_generator = SiamSequenceGenerator(val_structure,128,path_imgidx,path_imgrec)\n","train_s_p_e = train_generator.length\n","val_s_p_e = val_generator.length"],"execution_count":0,"outputs":[]},{"metadata":{"id":"5cD6-uJJGhRU","colab_type":"code","colab":{}},"cell_type":"code","source":["val_s_p_e"],"execution_count":0,"outputs":[]},{"metadata":{"id":"aOWGeuxW0Sz_","colab_type":"code","colab":{}},"cell_type":"code","source":["\"\"\"callbacks_list = [LRSearch(f1_score,val_generator)]\n","similarity_model.fit_generator(train_generator, steps_per_epoch=train_s_p_e,epochs=train_parameters['epochs'], validation_data=val_generator, validation_steps=val_s_p_e, callbacks=callbacks_list)\"\"\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"J0FxykdTGuuj","colab_type":"code","outputId":"768ee9f3-d212-4040-933a-617a97c82485","colab":{"base_uri":"https://localhost:8080/","height":1272},"executionInfo":{"status":"error","timestamp":1555965363953,"user_tz":-180,"elapsed":131140,"user":{"displayName":"Quentin Legrand","photoUrl":"https://lh6.googleusercontent.com/-IXHiOGs04sE/AAAAAAAAAAI/AAAAAAAAAFk/ppsEvqzCcGw/s64/photo.jpg","userId":"00421493000358847389"}}},"cell_type":"code","source":["callbacks_list = [SaveModelandReduceLR(f1_score,val_generator,MODEL_SAVE_PATH, 1000,reduce_lr = False), LRScheduler(train_parameters['max_lr'])]\n","similarity_model.fit_generator(train_generator, steps_per_epoch=train_s_p_e,epochs=train_parameters['epochs'], validation_data=val_generator, validation_steps=val_s_p_e, callbacks=callbacks_list)"],"execution_count":22,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.cast instead.\n","\n","val f1_score: 0.06404954281369622\n","Epoch 1/2\n","   30/42920 [..............................] - ETA: 7:55:00 - loss: 0.5100 - acc: 0.8201"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-8b4a72c42b7a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mcallbacks_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mSaveModelandReduceLR\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf1_score\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mval_generator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mMODEL_SAVE_PATH\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1000\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mreduce_lr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mLRScheduler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_parameters\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'max_lr'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0msimilarity_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_generator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_generator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_s_p_e\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_parameters\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'epochs'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_generator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mval_s_p_e\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbacks_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/legacy/interfaces.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     89\u001b[0m                 warnings.warn('Update your `' + object_name + '` call to the ' +\n\u001b[1;32m     90\u001b[0m                               'Keras 2 API: ' + signature, stacklevel=2)\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0mwrapper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(self, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m   1416\u001b[0m             \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1417\u001b[0m             \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1418\u001b[0;31m             initial_epoch=initial_epoch)\n\u001b[0m\u001b[1;32m   1419\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1420\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0minterfaces\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy_generator_methods_support\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training_generator.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(model, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m    179\u001b[0m             \u001b[0mbatch_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0msteps_done\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 181\u001b[0;31m                 \u001b[0mgenerator_output\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput_generator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    182\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgenerator_output\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'__len__'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/utils/data_utils.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    593\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    594\u001b[0m             \u001b[0;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_running\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 595\u001b[0;31m                 \u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mqueue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mblock\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    596\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mqueue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtask_done\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    597\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0minputs\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/multiprocessing/pool.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    662\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    663\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 664\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    665\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mready\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    666\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/multiprocessing/pool.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    659\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    660\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 661\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_event\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    662\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    663\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    549\u001b[0m             \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flag\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    550\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 551\u001b[0;31m                 \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cond\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    552\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    553\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    293\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    294\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 295\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    296\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"metadata":{"id":"uzZc1sju1P4f","colab_type":"code","colab":{}},"cell_type":"code","source":["\"\"\"plt.imshow(train_generator.__getitem__(2345)[0][1][31])\n","train_generator.__gexxxxx ctitem__(2345)[1][31]\"\"\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"fmVxxnDhGzw9","colab_type":"code","colab":{}},"cell_type":"code","source":["\"\"\"print(train_generator.__getitem__(2345)[0][0][0].shape)\n","print(train_generator.__getitem__(2345)[0][0].shape)\"\"\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"HKw5BfzmXiAR","colab_type":"code","colab":{}},"cell_type":"code","source":["\"\"\"batch = 1212bb    345\n","print(np.squeeze(similarity_model.predict(train_generator.__getitem__(batch)[0])))\n","print(train_generator.__getitem__(batch)[1])\"\"\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"h36bXUiYZAm_","colab_type":"code","colab":{}},"cell_type":"code","source":["\"\"\"plt.imshow(train_generator.__getitem__(batch)[0][0][26])\"\"\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"0FHHLYO6ZfW6","colab_type":"code","colab":{}},"cell_type":"code","source":["\"\"\"plt.imshow(train_generator.__getitem__(batch)[0][1][26])\"\"\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"vD1B8cWDZiVo","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}